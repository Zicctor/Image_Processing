import streamlit as st
import cv2 as cv
import numpy as np
from PIL import Image
import io

def resize_with_aspect_ratio(image, width=None, height=None, inter=cv.INTER_AREA):
    """Thay ƒë·ªïi k√≠ch th∆∞·ªõc ·∫£nh v·ªõi t·ª∑ l·ªá khung h√¨nh ƒë∆∞·ª£c gi·ªØ nguy√™n"""
    dim = None
    (h, w) = image.shape[:2]
    
    if width is None and height is None:
        return image
    
    if width is None:
        r = height / float(h)
        dim = (int(w * r), height)
    else:
        r = width / float(w)
        dim = (width, int(h * r))
    
    return cv.resize(image, dim, interpolation=inter)

def apply_laplacian(image, kernel_size):
    """Ph√°t hi·ªán c·∫°nh s·ª≠ d·ª•ng to√°n t·ª≠ Laplacian c·ªßa OpenCV"""
    # Chuy·ªÉn sang ·∫£nh x√°m
    gray = cv.cvtColor(image, cv.COLOR_BGR2GRAY)
    
    # √Åp d·ª•ng to√°n t·ª≠ Laplacian s·ª≠ d·ª•ng OpenCV
    laplacian = cv.Laplacian(gray, cv.CV_16S, ksize=kernel_size)
    
    # Chuy·ªÉn ƒë·ªïi sang ·∫£nh uint8 ƒë·ªÉ hi·ªÉn th·ªã
    result = cv.convertScaleAbs(laplacian)
    
    return result

def process_image(image, kernel_size=3, max_width=800, sharpening=False, sharp_strength=1.5):
    """Ti·ªÅn x·ª≠ l√Ω v√† √°p d·ª•ng b·ªô l·ªçc l√†m n√©t"""
    image = np.array(image)
    if len(image.shape) == 3 and image.shape[2] == 4:
        image = cv.cvtColor(image, cv.COLOR_RGBA2BGR)
    
    image = resize_with_aspect_ratio(image, width=max_width)
    
    # √Åp d·ª•ng Laplacian
    laplacian = apply_laplacian(image, kernel_size)
    
    # √Åp d·ª•ng Unsharp Masking n·∫øu ƒë∆∞·ª£c ch·ªçn
    if sharpening:
        image = unsharp_mask(image, sharp_strength)
    
    return image, laplacian

def unsharp_mask(image, strength=1.5):
    """TƒÉng ƒë·ªô s·∫Øc n√©t c·ªßa ·∫£nh b·∫±ng ph∆∞∆°ng ph√°p Unsharp Masking"""
    blurred = cv.GaussianBlur(image, (5, 5), 0)
    sharpened = cv.addWeighted(image, 1 + strength, blurred, -strength, 0)
    return sharpened

def main():
    st.set_page_config(page_title="Ph√°t Hi·ªán C·∫°nh ·∫¢nh", layout="wide")

    st.title("·ª®ng D·ª•ng Ph√°t Hi·ªán C·∫°nh & L√†m N√©t ·∫¢nh B·∫±ng To√°n T·ª≠ Laplace")

    uploaded_file = st.file_uploader("üñº Ch·ªçn m·ªôt h√¨nh ·∫£nh...", type=['png', 'jpg', 'jpeg', 'bmp', 'webp'])

    st.sidebar.header("‚öô C√†i ƒê·∫∑t")

    kernel_size = st.sidebar.slider("K√≠ch Th∆∞·ªõc Kernel (ch·ªâ s·ªë l·∫ª)", 1, 7, 3, step=2)

    max_width = st.sidebar.slider("Chi·ªÅu R·ªông T·ªëi ƒêa C·ªßa ·∫¢nh", 300, 1200, 800, step=100)

    sharpening = st.sidebar.checkbox("B·∫≠t Unsharp Masking (L√†m N√©t)", value=False)
    
    sharp_strength = st.sidebar.slider("C∆∞·ªùng ƒê·ªô L√†m N√©t", 0.5, 3.0, 1.5, step=0.1) if sharpening else None

    if uploaded_file is not None:
        try:
            image = Image.open(uploaded_file)

            original, edges = process_image(
                image,
                kernel_size=kernel_size,
                max_width=max_width,
                sharpening=sharpening,
                sharp_strength=sharp_strength
            )

            col1, col2 = st.columns(2)

            with col1:
                st.subheader("·∫¢nh G·ªëc")
                st.image(original, channels="BGR", use_container_width=True)

            with col2:
                st.subheader("Ph√°t Hi·ªán C·∫°nh")
                st.image(edges, use_container_width=True)

        except Exception as e:
            st.error(f"‚ö† L·ªói x·ª≠ l√Ω h√¨nh ·∫£nh: {str(e)}")

if __name__ == "__main__":
    main()